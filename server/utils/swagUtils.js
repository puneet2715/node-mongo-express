import path from 'path';
import pluralize from 'pluralize';
import m2s from 'mongoose-to-swagger';
import kebabCase from 'lodash/kebabCase';
import swaggerUi from 'swagger-ui-express';
import { REQUEST_TYPES } from 'api/customApisMapper';
import Pack from '../../package.json';
import { getModelFiles } from '.';
import { getStacks } from './routeLister';

export const DEFAULT_SWAGGER_DEFINITIONS = {
    deleteResponse: {
        type: 'object',
        properties: {
            deletedCount: {
                type: 'integer',
                format: 'int64',
                example: 1
            }
        }
    }
};

/**
 * Base swagger document
 */
const SWAGGER_DOCUMENT = {
    swagger: '2.0',
    info: {
        title: 'Parcel Node Mongo Express Documentation',
        version: Pack.version
    },
    tags: [],
    paths: {},
    definitions: {
        ...DEFAULT_SWAGGER_DEFINITIONS
    }
};

export const REQUEST_METHODS = {
    [REQUEST_TYPES.create]: 'post',
    [REQUEST_TYPES.update]: 'patch',
    [REQUEST_TYPES.fetchOne]: 'get',
    [REQUEST_TYPES.fetchAll]: 'get',
    [REQUEST_TYPES.remove]: 'delete'
};

export const REQUEST_METHODS_TYPES = {
    post: REQUEST_TYPES.create,
    patch: REQUEST_TYPES.update,
    delete: REQUEST_TYPES.remove
};

export const SWAGGER_DOCS_PATH = '/api-docs/swagger.json';

/**
 * @typedef CustomSwagger
 * @type {object}
 * @property {Array|object} tags
 * @property {object} paths
 * @property {object} definitions
 */

/**
 * Register swagger UI to the express instance
 * @param {import('express').Express} app
 * @param {CustomSwagger} customSwagger
 */
export const registerSwagger = app => {
    const options = {
        swaggerOptions: {
            url: SWAGGER_DOCS_PATH
        }
    };
    console.time('populate');
    populateModelsSwagger(app);
    console.timeEnd('populate');
    app.get(SWAGGER_DOCS_PATH, (_, res) => res.json(SWAGGER_DOCUMENT));
    app.use(
        '/api-docs',
        swaggerUi.serveFiles(null, options),
        swaggerUi.setup(null, options)
    );
};

/**
 * Populate swagger document for autogenerated API
 * @param {import('express').Express} app
 */
export const populateModelsSwagger = app => {
    const modelsFolderPath = path.join(__dirname, '../database/models/');
    const fileArray = getModelFiles(modelsFolderPath);
    fileArray.forEach(f => {
        const { model } = require(modelsFolderPath + f);
        const name = f.split('.')[0];
        buildSwag(app, name, model);
    });
};

/**
 * Get app registered methods for model CRUD API
 * @param {import('express').Express} app express app instance
 * @param {string} modelName model name
 * @returns
 */
export const buildSwag = (app, modelName, model) => {
    const requestTypes = [];
    getStacks(app).forEach(stack => {
        if (!stack.route) return false;
        else if (
            stack.routerPath === `/${kebabCase(modelName)}/` &&
            (stack.route.path === '/:_id' || stack.route.path === '/')
        ) {
            requestTypes.push(getRequestTypeFromStack(stack));
        } else if (stack.routerPath === '/') {
            const method = Object.keys(stack.route.methods)[0];
            registerCustomRoutes(stack.route.path, method);
        }
    });
    modelSwagGenerator(modelName, model, requestTypes);
};

function getRequestTypeFromStack(stack) {
    const method = Object.keys(stack.route.methods)[0];
    switch (method) {
        case 'get':
            if (stack.route.path === '/:_id') return REQUEST_TYPES.fetchOne;
            return REQUEST_TYPES.fetchAll;
        default:
            return REQUEST_METHODS_TYPES[method];
    }
}

/**
 * Generator for swagger data for model
 * @param {string} modelName
 * @param {Model} model
 * @param {string[]} types
 * @returns
 */
export const modelSwagGenerator = (modelName, model, types) => {
    const swaggerPaths = {};
    types.forEach(type => getSwagPaths(type, modelName, swaggerPaths));
    const swaggerDefs = getSwagDefs(modelName, model);
    appendToSwaggerDoc({
        paths: swaggerPaths,
        definitions: swaggerDefs,
        tags: {
            name: modelName,
            description: `${modelName} related endpoints`
        }
    });
};

/**
 * Add data into base swagger document
 * @param {CustomSwagger} swaggerData
 */
export const appendToSwaggerDoc = swaggerData => {
    const { paths, definitions, tags } = swaggerData;
    if (tags) {
        SWAGGER_DOCUMENT.tags.push(tags);
    }
    if (paths) {
        SWAGGER_DOCUMENT.paths = {
            ...SWAGGER_DOCUMENT.paths,
            ...paths
        };
    }
    if (definitions) {
        SWAGGER_DOCUMENT.definitions = {
            ...SWAGGER_DOCUMENT.definitions,
            ...definitions
        };
    }
};

/**
 * Append data for registered custom routes into swagger document
 * @param {string} path
 * @param {string} method
 */
const registerCustomRoutes = (path, method) => {
    const successResponse = {
        description: 'Operation success',
        schema: {
            type: 'object',
            properties: {
                data: {
                    type: 'object'
                }
            }
        }
    };
    const errorResponse = {
        description: 'Operation failed',
        schema: {
            type: 'object',
            properties: {
                error: {
                    type: 'string',
                    example: 'something went wrong'
                }
            }
        }
    };
    appendToSwaggerDoc({
        paths: {
            [path]: {
                [method]: {
                    responses: {
                        200: successResponse,
                        400: errorResponse
                    }
                }
            }
        }
    });
};

/**
 *
 * @param {string} type
 * @param {string} modelName
 */
export const getSwagPaths = (type, modelName, swaggerPaths) => {
    const routeName = `/${kebabCase(modelName)}`;
    const method = REQUEST_METHODS[type];
    const lowerType = type.toLowerCase();
    const isPluralEntity = type === REQUEST_TYPES.fetchAll;
    const hasPathParam = ![
        REQUEST_TYPES.create,
        REQUEST_TYPES.fetchAll
    ].includes(type);
    const entityName = isPluralEntity
        ? modelName
        : pluralize.singular(modelName);
    const summary = `${lowerType} ${entityName}`;
    const parameters = hasPathParam
        ? [
              {
                  name: '_id',
                  in: 'path',
                  description: `ID of ${pluralize.singular(
                      modelName
                  )} to ${lowerType}`,
                  required: true,
                  type: 'string'
              }
          ]
        : {};
    const responses = {
        200: {
            type: 'object',
            description: `${lowerType} ${entityName} is success`,
            schema: {
                type: 'object',
                properties: {
                    data: isPluralEntity
                        ? {
                              type: 'array',
                              items: { $ref: `#/definitions/${modelName}` }
                          }
                        : type === REQUEST_TYPES.remove
                        ? { $ref: '#/definitions/deleteResponse' }
                        : { $ref: `#/definitions/${modelName}` }
                }
            }
        },
        400: {
            type: 'object',
            description: `${lowerType} ${entityName} is failed`,
            schema: {
                type: 'object',
                required: ['error'],
                properties: {
                    error: {
                        type: 'string',
                        example: `unable to ${lowerType} ${entityName}`
                    }
                }
            }
        }
    };
    const pathKey = !hasPathParam ? routeName : `${routeName}/{_id}`;
    swaggerPaths[pathKey] = {
        ...(swaggerPaths[pathKey] || {}),
        [method]: {
            tags: [modelName],
            summary,
            produces: ['application/json'],
            parameters,
            responses
        }
    };
};

export const getSwagDefs = (modelName, model) => {
    const swaggerDefs = {};
    const modelSchema = m2s(model);
    swaggerDefs[modelName] = {
        type: 'object',
        ...modelSchema,
        title: undefined
    };
    return swaggerDefs;
};
